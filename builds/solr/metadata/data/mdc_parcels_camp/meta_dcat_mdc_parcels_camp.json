{
  "dct:title": "Miami-Dade Parcels Augmented for CAMP",
  "dct:creator": ["Office for Civic and Community Engagement, University of Miami", "Institute for Data Science and Computing"],
  "dct:publisher": ["University of Miami Institute for Data Science and Computing"],
  "dct:rights": "Public Domain",
  "dct:license": "Open Data Commons Attribution License (ODC-By): http://opendatacommons.org/licenses/by/1.0/",
  "dct:coverage": ["Miami-Dade County"],
  "dct:type": "Vector Dataset",
  "dct:issued": "2024-06-05T00:00:00Z",
  "dct:description": "A polygon feature class of property boundaries in Miami-Dade county sourced from the Miami-Dade Open Data Portal and then augmented with elevation data, flood zone data, qualified opportunity zone boolean, water overlap as boolean, managed areas (parks), intersections with major roads, and both county and municipal zoning information. All of the augmentation is based on spatial joines. Please see the ETL and provenance documentation for more information.",
  "prov:qualifiedAttribution": "Miami-Dade parcel data with additional attribute fields based on key column and spatinal joins, see ETL documentation",
  "dcat:keyword": ["Miami-Dade County", "property", "elevation", "flood zones", "municipal zoning", "county zoning", "qualified opportunity zones", "land use", "DOR codes"],
  "dct:language": "en",
  "adms:representationTechnique": "vector",
  "locn:geometry": "multipolygon",
  "dct:conformsTo": "EPSG:4326",
  "prov:action": "#########\n# GDSC ETL is performed in two steps: shell script to ETL data into postgres\n# and then additional transformations with SQL in postGIS (if needed).\n####\n\n#########\n# Step 1 - bash script (pseudo code)\n####\n\n# create directory structure and move into it\nmkdir -p /data/mdc_parcels_camp/{download,etl} && cd /data/mdc_parcels_camp\n\n# set update flag based on last update and update frequency\ndo_update=0 if date() < last_update + update_frequency else do_update = 1\n\n-- load extension for foreign table management into pod\nCREATE EXTENSION IF NOT EXISTS postgres_fdw;\n\n-- create centroids and spatial index for spatial joins to multipolygon\nSELECT AddGeometryColumn ('public','mdc_parcels_camp','geom_centroid',4326,'POINT',2);\nUPDATE mdc_parcels_camp\n  SET geom_centroid = ST_PointOnSurface(mdc_parcels_camp.geom);\nCREATE INDEX mdc_parcels_camp_geom_centroid_idx\n  ON mdc_parcels_camp\n  USING GIST (geom_centroid);\nCOMMIT;\nNOTIFY pgrst, 'reload schema';\n\n-- join mdc_county_zoning to mdc_parcels_camp (within)\nCREATE SERVER postgis_e2ysqv7vtzx37qac FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-e2ysqv7vtzx37qac', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_e2ysqv7vtzx37qac OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_county_zoning) FROM SERVER postgis_e2ysqv7vtzx37qac INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_county_zone varchar, ADD COLUMN mdc_county_zone_desc varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_county_zone = mdc_county_zoning.zone, mdc_county_zone_desc = mdc_county_zoning.zone_desc\nFROM mdc_county_zoning\nWHERE ST_Within(mdc_parcels_camp.geom_centroid,mdc_county_zoning.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_municipal_zoning to mdc_parcels_camp (within)\nCREATE SERVER postgis_xhqzmmz1wgd6d6sy FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-xhqzmmz1wgd6d6sy', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_xhqzmmz1wgd6d6sy OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_municipal_zoning) FROM SERVER postgis_xhqzmmz1wgd6d6sy INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_municipal_zone varchar, ADD COLUMN mdc_municipal_zone_desc varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_municipal_zone = mdc_municipal_zoning.zone, mdc_municipal_zone_desc = mdc_municipal_zoning.zonedesc\nFROM mdc_municipal_zoning\nWHERE ST_Within(mdc_parcels_camp.geom_centroid,mdc_municipal_zoning.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_municipal_park_boundaries to mdc_parcels_camp (within)\nCREATE SERVER postgis_3la54wxabicz8vzm FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-3la54wxabicz8vzm', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_3la54wxabicz8vzm OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_municipal_park_boundaries) FROM SERVER postgis_3la54wxabicz8vzm INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_municipal_park_name varchar;\nCOMMIT;\n-- create centroids and spatial index for spatial joins to multipolygon\nSELECT AddGeometryColumn ('public','mdc_parcels_camp','geom_local_centroid',2236,'POINT',2);\nUPDATE mdc_parcels_camp\n  SET geom_local_centroid = ST_PointOnSurface(mdc_parcels_camp.geom_local);\nCREATE INDEX mdc_parcels_camp_geom_local_centroid_idx\n  ON mdc_parcels_camp\n  USING GIST (geom_local_centroid);\nCOMMIT;\nNOTIFY pgrst, 'reload schema';\n\nUPDATE mdc_parcels_camp\nSET mdc_municipal_park_name = mdc_municipal_park_boundaries.name\nFROM mdc_municipal_park_boundaries\nWHERE ST_Within(mdc_parcels_camp.geom_local_centroid,mdc_municipal_park_boundaries.geom_local);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_county_park_boundaries to mdc_parcels_camp (within)\nCREATE SERVER postgis_am3kfvhfkh4bcfsi FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-am3kfvhfkh4bcfsi', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_am3kfvhfkh4bcfsi OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_county_park_boundaries) FROM SERVER postgis_am3kfvhfkh4bcfsi INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_county_park_name varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_county_park_name = mdc_county_park_boundaries.name\nFROM mdc_county_park_boundaries\nWHERE ST_Within(mdc_parcels_camp.geom_local_centroid,mdc_county_park_boundaries.geom_local);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join fl_2023_flma to mdc_parcels_camp (within)\nCREATE SERVER postgis_vq9e663z4cjbv2iw FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-vq9e663z4cjbv2iw', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_vq9e663z4cjbv2iw OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (fl_2023_flma) FROM SERVER postgis_vq9e663z4cjbv2iw INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN fl_protected_area_name varchar, ADD COLUMN fl_protected_area_type varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET fl_protected_area_name = fl_2023_flma.maname, fl_protected_area_type = fl_2023_flma.matype\nFROM fl_2023_flma\nWHERE ST_Within(mdc_parcels_camp.geom_local_centroid,fl_2023_flma.geom_local);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_flood_hazard to mdc_parcels_camp (within)\nCREATE SERVER postgis_gaxfbdigubom2fwo FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-gaxfbdigubom2fwo', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_gaxfbdigubom2fwo OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_flood_hazard) FROM SERVER postgis_gaxfbdigubom2fwo INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN fema_flood_zone varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET fema_flood_zone = mdc_flood_hazard.fzone\nFROM mdc_flood_hazard\nWHERE ST_Within(mdc_parcels_camp.geom_centroid,mdc_flood_hazard.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_qualified_opportunity_zones to mdc_parcels_camp (within)\nCREATE SERVER postgis_2k0dg34uilke6ctl FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-2k0dg34uilke6ctl', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_2k0dg34uilke6ctl OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_qualified_opportunity_zones) FROM SERVER postgis_2k0dg34uilke6ctl INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_qualified_opportunity_zones boolean;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_qualified_opportunity_zones = true\nFROM mdc_qualified_opportunity_zones\nWHERE ST_Within(mdc_parcels_camp.geom_centroid,mdc_qualified_opportunity_zones.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_major_roads to mdc_parcels_camp (intersects)\nCREATE SERVER postgis_ljdbztukphqn0glt FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-ljdbztukphqn0glt', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_ljdbztukphqn0glt OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_major_roads) FROM SERVER postgis_ljdbztukphqn0glt INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_streetid numeric, ADD COLUMN mdc_street_type varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_streetid = mdc_major_roads.streetid, mdc_street_type = mdc_major_roads.class\nFROM mdc_major_roads\nWHERE ST_Intersects(mdc_parcels_camp.geom,mdc_major_roads.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_water_polygons to mdc_parcels_camp (overlap)\nCREATE SERVER postgis_unqeqjtqeg4bwgre FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-unqeqjtqeg4bwgre', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_unqeqjtqeg4bwgre OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_water_polygons) FROM SERVER postgis_unqeqjtqeg4bwgre INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_water_polygons boolean;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_water_polygons = true\nFROM mdc_water_polygons\nWHERE ST_Intersects(mdc_parcels_camp.geom_local, mdc_water_polygons.geom_local) AND ST_Area(ST_Intersection(mdc_parcels_camp.geom_local, mdc_water_polygons.geom_local))/ST_Area(mdc_parcels_camp.geom_local) > 0.5;\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_2015_dem_30ft to mdc_parcels_camp (extract)\nCREATE SERVER postgis_vtc29jryy1rbxz07 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-vtc29jryy1rbxz07', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_vtc29jryy1rbxz07 OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_2015_dem_30ft) FROM SERVER postgis_vtc29jryy1rbxz07 INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN elevation numeric;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET elevation = ST_Value(rast,ST_Transform(mdc_parcels_camp.geom_centroid,2236)) FROM mdc_2015_dem_30ft WHERE ST_Intersects(ST_Transform(mdc_parcels_camp.geom_centroid,2236), mdc_2015_dem_30ft.rast);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_neighborhoods to mdc_parcels_camp (within)\nCREATE SERVER postgis_d1gxh00d8j6m2xd0 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-d1gxh00d8j6m2xd0', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_d1gxh00d8j6m2xd0 OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_neighborhoods) FROM SERVER postgis_d1gxh00d8j6m2xd0 INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_neighborhood_name varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_neighborhood_name = mdc_neighborhoods.name\nFROM mdc_neighborhoods\nWHERE ST_Within(mdc_parcels_camp.geom_centroid,mdc_neighborhoods.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join mdc_municipal_boundary to mdc_parcels_camp (within)\nCREATE SERVER postgis_dn7tn2p5cfahc611 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-dn7tn2p5cfahc611', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_dn7tn2p5cfahc611 OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (mdc_municipal_boundary) FROM SERVER postgis_dn7tn2p5cfahc611 INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN mdc_municipal_boundary_name varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET mdc_municipal_boundary_name = mdc_municipal_boundary.name\nFROM mdc_municipal_boundary\nWHERE ST_Within(mdc_parcels_camp.geom_centroid,mdc_municipal_boundary.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- join com_neighborhoods to mdc_parcels_camp (within)\nCREATE SERVER postgis_90zi29yo2f6dr8g0 FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'postgis-90zi29yo2f6dr8g0', dbname 'gdsc', port '5432');\nCREATE USER MAPPING FOR postgres SERVER postgis_90zi29yo2f6dr8g0 OPTIONS (user '__PGUSER__', password '__PGPASS__');\nIMPORT FOREIGN SCHEMA public LIMIT TO (com_neighborhoods) FROM SERVER postgis_90zi29yo2f6dr8g0 INTO public;\nALTER TABLE mdc_parcels_camp ADD COLUMN com_neighborhood_name varchar;\nCOMMIT;\nUPDATE mdc_parcels_camp\nSET com_neighborhood_name = com_neighborhoods.label\nFROM com_neighborhoods\nWHERE ST_Within(mdc_parcels_camp.geom_centroid,com_neighborhoods.geom);\nCOMMIT;\n-- drop foreign server(??)\n\n-- remove extension postgres_fwd (??)\nALTER TABLE mdc_parcels_camp DROP COLUMN geom_centroid;\nALTER TABLE mdc_parcels_camp DROP COLUMN geom_local_centroid;\n\n\"",
  "prov:wasGeneratedBy": "GDSC automation (see Process Step)",
  "dcat:contactPoint": ["Timothy Norris", "Librarian Associate Professor", "University of Miami Libraries, Frost Institute for Data Science and Computing", "txn60@miami.edu"],
  "gdsc:label": "folio",
  "gdsc:value": ["true_site_owner", "dor_code_cur", "mdc_municipal_zoning", "mdc_county_zoning", "mdc_dem_30ft_2015", "mdc_flood_hazard", "mdc_qualified_opportunity_zones"],
  "gdsc:attributes": ["objectid;Internal feature number;Esri;oid;", "ogc_fid;Unique identifier;ESRI;integer;", "pid;Property unique identifier;MDC;integer;", "folio;Folio identifier;MDC;string;", "ttrrss;Township-range-section;MDC;string;", "x_coord;X-coordinate;MDC;double;", "y_coord;Y-coordinate;MDC;double;", "true_site_addr;Site address;MDC;string;", "true_site_unit; Site unit;MDC;string;", "true_site_city;Site city;MDC;string;", "true_site_zip_code;Site zipcode;MDC;string;", "true_mailing_addr1;True mailing address 1;MDC;string;", "true_mailing_addr2;True mailing address 2;MDC;string;", "true_mailing_addr3;True mailing address 3;MDC;string;", "true_mailing_city; True mailing city;MDC;string;", "true_mailing_state;True mailing state;MDC;string;", "true_mailing_zip_code;True mailing zipcode;MDC;string;", "true_mailing_country;True mailing country;MDC;string;", "true_owner1; Owner's name 1;MDC;string;", "true_owner2;Owner's name 2;MDC;string;", "true_owner3;Owner's name 3;MDC;string;", "condo_flag;Condo flag;MDC;string;", "parent_folio;Parent folio identifier;MDC;string;", "dor_code_cur;Current DOR (Department of Revenue) Code that idenitifies the land use;DOR;string;", "dor_desc;Department of Revenue classification description;DOR;string;", "subdivision;Subdivision;;string;", "bedroom_count; Number of bedrooms;MDC;long integer;bedrooms", "bathroom_count;Number of bathrooms;MDC;double;bathrooms", "half_bathroom_count;Number of half bathrooms;MDC;long integer;half bathrooms", "floor_count;Number of floors;MDC;long integer;floors", "unit_count;Number of units;MDC;long integer;units", "building_actual_area;Actual area of building;MDC;double;square feet", "building_heated_area;Heated area of building;MDC;double;square feet", "lot_size;Land Lot Size - in Square Feet;MDC;double;square feet", "year_built;Year built;MDC;short integer;", "assessment_year_cur;Current assessment year;MDC;long integer;", "assessed_val_cur;Current assessed value;MDC;double;", "dos_1;Date of sale;;string;", "price_1;Price of sale;;double;", "legal;Legal representation;;string;", "shape_area; area of polygon;Esri;double;", "shape_length; length of polygon;Esri;double;", "mdc_county_zone;County zone from mdc_county_zones provided by Miami-Dade County;spatial join parcel within mdc_county_zones;string;", "mdc_county_zone_desc;County zone description from mdc_county_zones provided by Miami-Dade county;derived from description from spatial join parcel;string;", "mdc_municipal_zone;Municipal zone from mdc_municipal_zones provided by Miami-Dade county;spatial join parcel within mdc_municipal_zones;string;", "mdc_municipal_zone_desc;Municipal zone description from mdc_municipal_zones provided by Miami-Dade county;derived from description from spatial join parcel;string;", "mdc_municipal_park_name;Municipal park name from mdc_municipal_park_boundaries provided by Miami-Dade county;spatial join parcel within mdc_municipal_park_boundaries;string;", "mdc_county_park_name;County park name from mdc_county_park_boundaries provided by Miami-Dade county;spatial join parcel within mdc_county_park_boundaries;string;", "fema_flood_zone;flood zones from mdc_flood_hazard;Provided by Miami-Dade county;string;", "flma_name;Florida managed area name;Florida Natural Areas Inventory;string;", "flma_type;Florida managed area type;Florida Natural Areas Inventory;string;", "mdc_qualified_opportunity_zones;Whether or not qualifed opportunity zones are within parcels;Extracted from mdc_qualified_opportunity_zones;boolean;", "mdc_streetid;Street id provided by Miami-Dade county;derived from street id from spatial join;numeric;", "mdc_street_type;Street type;Appended from mdc_streets;varchar;", "mdc_water_polygons;Whether or not bodies of water overlap with parcels;Extracted from mdc_water_polygons;boolean;", "elevation;relative elevation of area;Extracted from mdc_2015 dem provided by Miami-Dade county;float;feet"],
  "gdsc:tileUrl": ["https://gdsc.idsc.miami.edu/vectortiles/data/mdc_parcels_camp/", "{z}/{x}/{y}.pbf", "#14/25.9436/-80.16305"],
  "gdsc:collections": ["CAMP", "Little River Climate Resilience", "Miami-Dade Climate Resilience"],
  "gdsc:functions": ["gdsc_get_attributes"],
  "gdsc:analyticConformsTo": "EPSG:2236",
  "gdsc:sponsor": ["IDSC;https://idsc.miami.edu", "Library;https://www.library.miami.edu"],
  "dcat:downloadURL": "mdc_property_boundary|mdc_municipal_zoning|mdc_county_zoning|mdc_2015_dem_30ft|mdc_flood_hazard|mdc_qualified_opportunity_zones|mdc_major_roads|mdc_water_polygons|fl_2023_flma",
  "gdsc:tablename": "mdc_parcels_camp",
  "dcat:qualifiedRelation": ["mdc_property_boundary", "mdc_municipal_zoning", "mdc_county_zoning", "mdc_county_park_boundaries", "mdc_municipal_park_boundaries", "mdc_flood_hazard", "mdc_qualified_opportunity_zones", "mdc_major_roads", "fl_2023_flma", "mdc_water_polygons", "mdc_2015_dem_30ft", "mdc_neighborhoods", "mdc_municipal_boundary", "com_neighborhoods"],
  "gdsc:up": "false",
  "dct:modified": "2024-10-22 11:26:35",
  "dct:accrualPeriodicity": "As Needed",
  "spdx:checksum": "TBD",
  "gdsc:podID": "postgis-4d8urdupgjvec6d0",
  "dct:extent": ["12180", "12K"],
  "dcat:bbox": "not yet know"
}
